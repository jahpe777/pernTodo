{"ast":null,"code":"var _jsxFileName = \"/Users/jahpe777/Projects/perntodo-client/src/App.js\";\nimport React, { Component, Fragment } from 'react';\nimport InputTodo from './InputTodo/InputTodo';\nimport TodoContext from './Context/TodoContext';\nimport ListTodos from './ListTodos/ListTodos';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [],\n      addNewTodo: description => {\n        fetch('http://localhost:9000/api/todos', {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          method: 'POST',\n          body: JSON.stringify({\n            description\n          })\n        }).then(res => res.json()).then(res => {\n          this.setState({\n            todos: [...this.state.todos, res]\n          });\n        }).catch(err => console.log(err));\n      },\n      updateTodo: (todoId, newDescription) => {\n        fetch(`http://localhost:9000/api/todos/${todoId}`, {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          method: 'PATCH',\n          body: JSON.stringify(newDescription)\n        }).then(res => res).then(res => {\n          this.setState({\n            todos: [...this.state.todos, res]\n          });\n        }).catch(err => console.log(err));\n      },\n      deleteTodo: todoId => {\n        fetch(`http://localhost:9000/api/todos/${todoId}`, {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          method: 'DELETE',\n          body: JSON.stringify(todoId)\n        }).then(res => {\n          if (!res.ok) return res.json().then(e => Promise.reject(e));\n          return true;\n        }).then(deletedTodo => {\n          this.setState({\n            todos: this.state.todos.filter(todo => todo.id !== todoId)\n          });\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:9000/api/todos`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) {\n        return res.json().then(error => Promise.reject(error));\n      }\n\n      return res.json();\n    }).then(todos => {\n      this.setState({\n        todos: todos\n      });\n    }).catch(error => {\n      this.setState({\n        error\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(TodoContext.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputTodo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ListTodos, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jahpe777/Projects/perntodo-client/src/App.js"],"names":["React","Component","Fragment","InputTodo","TodoContext","ListTodos","App","constructor","state","todos","addNewTodo","description","fetch","headers","method","body","JSON","stringify","then","res","json","setState","catch","err","console","log","updateTodo","todoId","newDescription","deleteTodo","ok","e","Promise","reject","deletedTodo","filter","todo","id","componentDidMount","error","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport InputTodo from './InputTodo/InputTodo';\n\nimport TodoContext from './Context/TodoContext';\n\nimport ListTodos from './ListTodos/ListTodos';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [],\n\n      addNewTodo: description => {\n        fetch('http://localhost:9000/api/todos', {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          method: 'POST',\n          body: JSON.stringify({ description })\n        })\n          .then(res => res.json())\n          .then(res => {\n            this.setState({ todos: [...this.state.todos, res] });\n          })\n          .catch(err => console.log(err));\n      },\n\n      updateTodo: (todoId, newDescription) => {\n        fetch(`http://localhost:9000/api/todos/${todoId}`, {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          method: 'PATCH',\n          body: JSON.stringify(newDescription)\n        })\n          .then(res => res)\n          .then(res => {\n            this.setState({\n              todos: [...this.state.todos, res]\n            });\n          })\n          .catch(err => console.log(err));\n      },\n\n      deleteTodo: todoId => {\n        fetch(`http://localhost:9000/api/todos/${todoId}`, {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          method: 'DELETE',\n          body: JSON.stringify(todoId)\n        })\n          .then(res => {\n            if (!res.ok) return res.json().then(e => Promise.reject(e));\n            return true;\n          })\n          .then(deletedTodo => {\n            this.setState({\n              todos: this.state.todos.filter(todo => todo.id !== todoId)\n            });\n          });\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:9000/api/todos`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (!res.ok) {\n          return res.json().then(error => Promise.reject(error));\n        }\n        return res.json();\n      })\n      .then(todos => {\n        this.setState({ todos: todos });\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n  }\n\n  render() {\n    return (\n      <TodoContext.Provider value={this.state}>\n        <Fragment>\n          <div className=\"container\">\n            <InputTodo />\n            <ListTodos />\n          </div>\n        </Fragment>\n      </TodoContext.Provider>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}